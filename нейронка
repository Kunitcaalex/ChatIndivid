#include <iostream>
#include <fstream>
#include <mpi.h>

using namespace std;

int main(int argc, char* argv[]) {
    int n; // размерность матрицы
    double** A; // матрица
    double** local_A; // локальная матрица для каждого процесса
    int rank, num_procs; // ранг процесса и количество процессов
    int local_n; // размерность локальной матрицы
    int* sendcounts; // массив размеров блоков данных, отправляемых каждому процессу
    int* displs; // массив смещений блоков данных для каждого процесса
    int tag = 0; // тег для обмена сообщениями
    double start_time, end_time; // время начала и окончания работы

    // Инициализация MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);

    // Чтение размерности матрицы и ее элементов из файла
    if (rank == 0) {
        ifstream fin("input.txt");
        fin >> n;
        A = new double* [n];
        for (int i = 0; i < n; i++) {
            A[i] = new double[n];
            for (int j = 0; j < n; j++) {
                fin >> A[i][j];
            }
        }
        fin.close();
    }

    // Рассылка размерности матрицы всем процессам
    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Выделение памяти для локальной матрицы
    local_n = n / num_procs;
    local_A = new double* [local_n];
    for (int i = 0; i < local_n; i++) {
        local_A[i] = new double[n];
    }

    // Рассылка блоков данных матрицы A всем процессам
    sendcounts = new int[num_procs];
    displs = new int[num_procs];
    for (int i = 0; i < num_procs; i++) {
        sendcounts[i] = local_n * n;
        displs[i] = i * sendcounts[i];
    }
    MPI_Scatter(&(A[0][0]), local_n * n, MPI_DOUBLE, &(local_A[0][0]), local_n * n, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Замена каждого элемента на среднеарифметическое соседних элементов
    for (int i = 1; i < local_n - 1; i++) {
        for (int j = 1; j < n - 1; j++) {
            local_A[i][j] = (local_A[i - 1][j] + local_A[i + 1][j] + local_A[i][j - 1] + local_A[i][j + 1]) / 4.0;
        }
    }

    // Обмен граничными строками между процессами
    double* recv_top_row = new double[n];
    double* recv_bottom_row = new double[n];

    // Отправка верхней граничной строки текущей локальной матрицы процесса rank-1
    if (rank > 0) {
        for (int j = 0; j < n; j++) {
            send_top_row[j] = local_A[0][j];
        }
        MPI_Send(send_top_row, n, MPI_DOUBLE, rank - 1, tag, MPI_COMM_WORLD);
    }

    // Отправка нижней граничной строки текущей локальной матрицы процесса rank+1
    if (rank < num_procs - 1) {
        for (int j = 0; j < n; j++) {
            send_bottom_row[j] = local_A[local_n - 1][j];
        }
        MPI_Send(send_bottom_row, n, MPI_DOUBLE, rank + 1, tag, MPI_COMM_WORLD);
    }

    // Получение верхней граничной строки локальной матрицы процесса rank-1
    if (rank > 0) {
        MPI_Recv(recv_top_row, n, MPI_DOUBLE, rank - 1, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        for (int j = 0; j < n; j++) {
            local_A[0][j] = recv_top_row[j];
        }
    }

    // Получение нижней граничной строки локальной матрицы процесса rank+1
    if (rank < num_procs - 1) {
        MPI_Recv(recv_bottom_row, n, MPI_DOUBLE, rank + 1, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        for (int j = 0; j < n; j++) {
            local_A[local_n - 1][j] = recv_bottom_row[j];
        }
    }

    // Сборка блоков локальной матрицы в глобальную матрицу A
    MPI_Gather(&(local_A[0][0]), local_n * n, MPI_DOUBLE, &(A[0][0]), local_n * n, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Вывод результатов работы каждого процесса и финальной матрицы
    if (rank == 0) {
        cout << "Result of each process:" << endl;
        for (int p = 0; p < num_procs; p++) {
            for (int i = 0; i < local_n; i++) {
                for (int j = 0; j < n; j++) {
                    cout << local_A[i][j] << " ";
                }
                cout << endl;
            }
            cout << endl;
        }
        cout << "Final matrix:" << endl;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << A[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Освобождение памяти
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            delete[] A[i];
        }
        delete[] A;
    }
    for (int i = 0; i < local_n; i++) {
        delete[] local;
    } 
